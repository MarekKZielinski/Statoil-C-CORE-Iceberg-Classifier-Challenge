timestamp,epoch [val_loss [min]],val_loss [min],training_loss [val_loss [min]],val_acc [val_loss [min]],training_acc [val_loss [min]],epoch [val_acc [max]],val_acc [max],training_loss [val_acc [max]],val_loss [val_acc [max]],training_acc [val_acc [max]],model_path,model_weights_path,model_python_code,model_comment
2017_12_19_23_46_15,43,0.2046969238327595,0.21728127577247466,0.9163090323173949,0.9055258692267106,61,0.9274017467248908,0.1909110121123506,0.21599080714086522,0.9242424242424242,L:\Data Science\GIT\Statoil-C-CORE-Iceberg-Classifier-Challenge\models\model.CNN_2017_12_19_v15_2017_12_19_23_46_15.hdf5,L:\Data Science\GIT\Statoil-C-CORE-Iceberg-Classifier-Challenge\models\weights.CNN_2017_12_19_v15_2017_12_19_23_46_15.hdf5,"
main_input = Input(shape=(75,75,2), name='main_input')
aux_input = Input(shape=(75,75,3), name='aux_input')

#conv layers for main_input
x1 = BatchNormalization()(main_input)
x1 = Conv2D(64, (3,3), activation='relu')(x1)
x1 = MaxPooling2D((2, 2), strides=(2, 2))(x1)
x1 = BatchNormalization()(x1)
x1 = Dropout(0.2)(x1)

#conv layers for aux_input
x2 = BatchNormalization()(aux_input)
x2 = Conv2D(64, (3,3), activation='relu')(x2)
x2 = MaxPooling2D((2, 2), strides=(2, 2))(x2)
x2 = BatchNormalization()(x2)
x2 = Dropout(0.2)(x2)

x = Concatenate(axis=3)([x1,x2])
    
#conv-block
x = Conv2D(128, (3, 3), activation='relu')(x)
x = MaxPooling2D((2, 2), strides=(2, 2))(x)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)

#conv-block
x = Conv2D(256, (3, 3), activation='relu')(x)
x = MaxPooling2D((2, 2), strides=(2, 2))(x)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)

#conv-block
x = Conv2D(256, (3, 3), activation='relu')(x)
x = MaxPooling2D((2, 2), strides=(2, 2))(x)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)
    
    #flatten
x = Flatten()(x)
angle_input = Input(shape=[1], name='angle_input')
merged = Concatenate()([x, angle_input])

    #dense-block
x = Dense(513, activation='relu')(merged)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)

    #dense-block
x = Dense(256, activation='relu')(x)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)

main_output = Dense(1, activation='sigmoid', name='main_output')(x)
model_f = Model(inputs=[main_input,aux_input,angle_input], outputs=[main_output])

model_f.compile(optimizer=Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0),
loss='binary_crossentropy',
metrics=['accuracy'])",2 CNN inputs with 64 initial conv filters - additional Conv2D MaxPooling block
2017_12_20_00_39_34,56,0.19924122858873883,0.17063755264469221,0.9181222707423581,0.9385026737967914,63,0.9252183406113537,0.15707911983955777,0.20313556463250232,0.9367201426024956,L:\Data Science\GIT\Statoil-C-CORE-Iceberg-Classifier-Challenge\models\model.CNN_2017_12_19_v15_2017_12_20_00_39_34.hdf5,L:\Data Science\GIT\Statoil-C-CORE-Iceberg-Classifier-Challenge\models\weights.CNN_2017_12_19_v15_2017_12_20_00_39_34.hdf5,"
main_input = Input(shape=(75,75,2), name='main_input')
aux_input = Input(shape=(75,75,3), name='aux_input')

#conv layers for main_input
x1 = BatchNormalization()(main_input)
x1 = Conv2D(64, (3,3), activation='relu')(x1)
x1 = MaxPooling2D((2, 2), strides=(2, 2))(x1)
x1 = BatchNormalization()(x1)
x1 = Dropout(0.2)(x1)

#conv layers for aux_input
x2 = BatchNormalization()(aux_input)
x2 = Conv2D(64, (3,3), activation='relu')(x2)
x2 = MaxPooling2D((2, 2), strides=(2, 2))(x2)
x2 = BatchNormalization()(x2)
x2 = Dropout(0.2)(x2)

x = Concatenate(axis=3)([x1,x2])
    
#conv-block
x = Conv2D(128, (3, 3), activation='relu')(x)
x = MaxPooling2D((2, 2), strides=(2, 2))(x)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)

#conv-block
x = Conv2D(256, (3, 3), activation='relu')(x)
x = MaxPooling2D((2, 2), strides=(2, 2))(x)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)
    
#flatten
x = Flatten()(x)
angle_input = Input(shape=[1], name='angle_input')
merged = Concatenate()([x, angle_input])

#dense-block
x = Dense(513, activation='relu')(merged)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)

#dense-block
x = Dense(256, activation='relu')(x)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)

main_output = Dense(1, activation='sigmoid', name='main_output')(x)
model_f = Model(inputs=[main_input,aux_input,angle_input], outputs=[main_output])

model_f.compile(optimizer=Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0),
loss='binary_crossentropy',
metrics=['accuracy'])",2 CNN inputs with 64 initial conv filters - then 2 Conv2D MaxPooling blocks
2017_12_20_01_02_41,48,0.17829343346839255,0.19083902271673642,0.9297872477389396,0.9304813022282035,49,0.9417879616148507,0.19048374202002816,0.19022458091595068,0.9215686461504768,L:\Data Science\GIT\Statoil-C-CORE-Iceberg-Classifier-Challenge\models\model.CNN_2017_12_19_v15_2017_12_20_01_02_41.hdf5,L:\Data Science\GIT\Statoil-C-CORE-Iceberg-Classifier-Challenge\models\weights.CNN_2017_12_19_v15_2017_12_20_01_02_41.hdf5,"
main_input = Input(shape=(75,75,2), name='main_input')
aux_input = Input(shape=(75,75,3), name='aux_input')

#conv layers for main_input
x1 = BatchNormalization()(main_input)
x1 = Conv2D(64, (3,3), activation='relu')(x1)
x1 = MaxPooling2D((2, 2), strides=(2, 2))(x1)
x1 = BatchNormalization()(x1)
x1 = Dropout(0.2)(x1)

#conv layers for aux_input
x2 = BatchNormalization()(aux_input)
x2 = Conv2D(64, (3,3), activation='relu')(x2)
x2 = MaxPooling2D((2, 2), strides=(2, 2))(x2)
x2 = BatchNormalization()(x2)
x2 = Dropout(0.2)(x2)

x = Concatenate(axis=3)([x1,x2])
    
#conv-block
x = Conv2D(128, (3, 3), activation='relu')(x)
x = MaxPooling2D((2, 2), strides=(2, 2))(x)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)

#conv-block
x = Conv2D(256, (3, 3), activation='relu')(x)
x = MaxPooling2D((2, 2), strides=(2, 2))(x)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)
    
#flatten
x = Flatten()(x)
angle_input = Input(shape=[1], name='angle_input')
merged = Concatenate()([x, angle_input])

#dense-block
x = Dense(513, activation='relu')(merged)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)

#dense-block
x = Dense(256, activation='relu')(x)
x = BatchNormalization()(x)
x = Dropout(0.2)(x)

main_output = Dense(1, activation='sigmoid', name='main_output')(x)
model_f = Model(inputs=[main_input,aux_input,angle_input], outputs=[main_output])

model_f.compile(optimizer=Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0),
loss='binary_crossentropy',
metrics=['accuracy'])",2 CNN inputs with 64 initial conv filters - then 2 Conv2D MaxPooling blocks
